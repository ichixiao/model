#rewritting code
##GPLVM with mixture of Gaussian latent p(X)
##latent_dimension is the dimension of the latent space

##n_components is the number of mixture components

##Y: observations
##generate samples from the posterior instead of maximizing the likelihood. It works by alternatively sampling p(c|x) and p(x|c) 
import numpy as np
from math import sqrt
def gplvm_dpmix_integrate_infer(latent_dimension, n_components, Y, labels, options):
    (N, input_dimension) = np.shape(Y)
    num_iters = 10000

    ##Default options for hybrid monte carlo
    options = {'num_iters':1, 'Tau':25, 'epsilon':0.001*sqrt(N), 'isPlot':0}

    ##Default model options
    isDP = 1
    isGP = 1
    isSamplingDPparameter = 0
    isPlot = 1
    isFixedGauss = 0
    prior_r = 1
    prior_alpha = 1

    ##options from parameter
    if options.has_key('prior_r'):
        prior_r = options['prior_r']

    if options.has_key('prior_alpha'):
        prior_alpha = options['prior_alpha']

    if options.has_key('isMovie'):
        isMovie = options['isMovie']

    if options.has_key('isPlot'):
        isPlot = options['isPlot']

    if options.has_key('isFixedGauss'):
        isFixedGauss = options['isFixedGauss']

    if options.has_key('isSamplingDPparameter'):
        isSamplingDPparameter = options['isSamplingDPparameter']

    if options.has_key('num_iters'):
        num_iters = options['num_iters']

    if options.has_key('epsilon'):
        epsilon = options['epsilon']

    if options.has_key('Tau'):
        Tau = options['Tau']

    if options.has_key('hmc_isPlot'):
        hmc_isPlot = options['hmc_isPlot']

    if options.has_key('no_warp'):
        no_warp = options['no_warp']

    if options.has_key('isGP'):
        isGP = optionsp['isGP']

if options.has_key('isGPLVMinit'):
    isGPLVMinit = options['isGPLVMinit']

if options.has_key('isback'):
    isback = options['isback']

if options.has_key('circle_size'):
    circle_size = options['circle_size']

if options.has_key('circle_alpha'):
    circle_alpha = options['circle_alpha']

if options.has_key('num_points'):
    numpoints = options['num_points']

##centering
Y = Y - np.tile(np.mean(Y, axis=0), (N,1))

##Initialize X as same as the observed data Y
if isGP==0:
   latent_dimension = input_dimension
if latent_dimension == input_dimension:
   init_X = Y
elif isGPLVMinit == 1
   gplvm_options = {}
#########call function gplvm_original here
   gplvm_params = gplvm_original()
